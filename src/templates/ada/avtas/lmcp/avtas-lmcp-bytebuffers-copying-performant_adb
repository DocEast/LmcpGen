with System.Storage_Elements;  use System.Storage_Elements;

package body AVTAS.LMCP.ByteBuffers.Copying is

   function Overlapping (Block_1, Block_2 : Address; Count : Storage_Count) return Boolean with
      Pre => Block_2 /= Null_Address and
             Block_1 /= Null_Address;

   -----------------
   -- Overlapping --
   -----------------

   function Overlapping (Block_1, Block_2 : Address; Count : Storage_Count) return Boolean is
      Block_1_First : constant Integer_Address := To_Integer (Block_1);
      Block_2_First : constant Integer_Address := To_Integer (Block_2);
      Block_1_Last  : constant Integer_Address := To_Integer (Block_1 + Count - 1);
      Block_2_Last  : constant Integer_Address := To_Integer (Block_2 + Count - 1);
   begin
      return (for some Location in Block_1_First .. Block_1_Last =>
                Location in Block_2_First .. Block_2_Last);
   end Overlapping;

   -------------
   -- MemCopy --
   -------------

   function MemCopy
     (Destination : Address;
      Source      : Address;
      Count       : Storage_Count)
   return Integer
   with
     Inline,
     Import,
     Convention => C,
     Link_Name => "memcpy",
     Pre  => Source /= Null_Address      and then
             Destination /= Null_Address and then
             not Overlapping (Destination, Source, Count),
     Post => MemCopy'Result = 0;
   --  Copies Length bytes from the object designated by Source to the object
   --  designated by Destination. Note the order of the address parameters
   --  is critical so callers should use the named association format for
   --  specifying actuals in calls.

   ---------------------------
   -- Copy_Buffer_To_String --
   ---------------------------

   procedure Copy_Buffer_To_String
     (This        : in out ByteBuffer;
      Length      : Index;
      Destination : in out String)
   is
      Result : Integer with Unreferenced;  -- checked by postcondition
   begin
      Result := MemCopy (Source      => This.Content (This.Position)'Address,
                         Destination => Destination'Address,
                         Count       => Storage_Count (Length));
      This.Position := This.Position + Length;
   end Copy_Buffer_To_String;

   -------------------------------------
   -- Copy_Buffer_To_Unbounded_String --
   -------------------------------------

   procedure Copy_Buffer_To_Unbounded_String
     (This        : in out ByteBuffer;
      Length      : Index;
      Destination : out Unbounded_String)
   is
      Buffer_As_String : String (1 .. Integer (Length));
      Result           : Integer with Unreferenced;  -- checked by postcondition
   begin
      Result := MemCopy (Source      => This.Content (This.Position)'Address,
                         Destination => Buffer_As_String'Address,
                         Count       => Storage_Count (Length));
      pragma Assert (Equal (Raw_Bytes (This) (This.Position .. This.Position + Length - 1), Buffer_As_String));
      This.Position := This.Position + Length;
      Destination := To_Unbounded_String (Buffer_As_String);
   end Copy_Buffer_To_Unbounded_String;

   ---------------------------
   -- Copy_String_To_Buffer --
   ---------------------------

   procedure Copy_String_To_Buffer
     (This : in out ByteBuffer;
      From : String)
   is
      Result : Integer with Unreferenced;  -- checked by postcondition
   begin
      Result := MemCopy (Source      => From'Address,
                         Destination => This.Content (This.Position)'Address,
                         Count       => Storage_Count (From'Length));
      This.Position := This.Position + From'Length;
      if This.Position > This.Highest_Write_Pos then
         This.Highest_Write_Pos := This.Position;
      end if;
   end Copy_String_To_Buffer;

   --------------------------
   -- Copy_Bytes_To_Buffer --
   --------------------------

   procedure Copy_Bytes_To_Buffer
     (This : in out ByteBuffer;
      From : Byte_Array)
   is
      Result : Integer with Unreferenced;  -- checked by postcondition
   begin
      Result := MemCopy (Source      => From'Address,
                         Destination => This.Content (This.Position)'Address,
                         Count       => Storage_Count (From'Length));
      This.Position := This.Position + From'Length;
      if This.Position > This.Highest_Write_Pos then
         This.Highest_Write_Pos := This.Position;
      end if;
   end Copy_Bytes_To_Buffer;

end AVTAS.LMCP.ByteBuffers.Copying;
