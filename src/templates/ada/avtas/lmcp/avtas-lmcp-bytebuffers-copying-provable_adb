package body AVTAS.LMCP.ByteBuffers.Copying with
   SPARK_Mode
is

   package ASU renames Ada.Strings.Unbounded;

   ---------------------------
   -- Copy_Buffer_To_String --
   ---------------------------

   procedure Copy_Buffer_To_String
     (This        : in out ByteBuffer'Class;
      Length      : Index;
      Destination : in out String)
   is
      Old_Pos : constant Index := Position (This) with Ghost;
   begin
      for K in Index range 0 .. Length - 1 loop
         Destination (Destination'First + Integer (K)) := Character'Val (This.Content (This.Position));

         pragma Loop_Invariant (This.Position = This.Position'Loop_Entry + K);
         pragma Loop_Invariant
           (for all J in 0 .. K =>
              Destination (Destination'First + Integer (J)) = Character'Val (This.Content (Old_Pos + J)));

         This.Position := This.Position + 1;
      end loop;
   end Copy_Buffer_To_String;

   -------------------------------------
   -- Copy_Buffer_To_Unbounded_String --
   -------------------------------------

   procedure Copy_Buffer_To_Unbounded_String
     (This        : in out ByteBuffer'Class;
      Length      : Index;
      Destination : out Unbounded_String)
   is
      Old_Pos : constant Index := Position (This) with Ghost;
   begin
      Destination := Null_Unbounded_String;
      pragma Assume (ASU.Length (Destination) = 0);
      for K in 0 .. Length - 1 loop
         Append (Destination, Character'Val (This.Content (This.Position)));

         pragma Loop_Invariant (ASU.Length (Destination) = 1 + Integer (K));
         pragma Loop_Invariant
           (for all J in 0 .. K =>
              Element (Destination, 1 + Integer (J)) = Character'Val (This.Content (Old_Pos + J)));
         pragma Loop_Invariant (This.Position = Old_Pos + K);

         This.Position := This.Position + 1;
      end loop;
   end Copy_Buffer_To_Unbounded_String;

   ---------------------------
   -- Copy_String_To_Buffer --
   ---------------------------

   procedure Copy_String_To_Buffer
     (This : in out ByteBuffer'Class;
      From : String)
   is
   begin
      This.Highest_Write_Pos := This.Highest_Write_Pos + From'Length;
      for J in Integer range 1 .. From'Length loop
         This.Content (This.Position) := Character'Pos (From (From'First + (J - 1)));
         This.Position := This.Position + 1;

         pragma Loop_Invariant (This.Position = This.Position'Loop_Entry + Index (J));
         pragma Loop_Invariant (This.Position <= This.Capacity - From'Length + Index (J));

         --  all the new content assigned so far matches that slice of Value
         pragma Loop_Invariant
           (for all K in 1 .. J =>
              This.Content (This.Position'Loop_Entry + Index (K) - 1) = Character'Pos (From (From'First + (K - 1))));

         --  no content before the newly inserted content has been changed
         pragma Loop_Invariant
           (if This.Position'Loop_Entry > 0 then -- not empty prior to call
              (for all K in 0 .. This.Position'Loop_Entry - 1 =>
                 This.Content (K) = This.Content'Loop_Entry (K)));

      end loop;
   end Copy_String_To_Buffer;

   --------------------------
   -- Copy_Bytes_To_Buffer --
   --------------------------

   procedure Copy_Bytes_To_Buffer
     (This : in out ByteBuffer'Class;
      From : Byte_Array)
   is
   begin
      This.Content (This.Position .. This.Position + From'Length - 1) := From;
      This.Highest_Write_Pos := This.Highest_Write_Pos + From'Length;
      This.Position := This.Position + From'Length;
   end Copy_Bytes_To_Buffer;

end AVTAS.LMCP.ByteBuffers.Copying;
